{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\n// Decorators and Lifehooks\nimport { Component, Input } from '@angular/core';\n// Services\nimport { CommentService } from '../../services/comment.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let CommentComponent = class CommentComponent {\n  constructor(commentService, modalService) {\n    this.commentService = commentService;\n    this.modalService = modalService;\n    this.comments = [];\n  }\n  ngOnInit() {\n    this.commentForm = new FormGroup({\n      'content': new FormControl('', Validators.required)\n    });\n    this.commentService.getComments(this.bookId, this.comments.length.toString()).subscribe(res => {\n      this.comments = res.data;\n    });\n  }\n  openFormModal(template, id) {\n    if (id) {\n      let content = '';\n      this.isFromEdit = true;\n      this.lastEditId = id;\n      for (const c of this.comments) {\n        if (c._id === id) {\n          content = c.content;\n          break;\n        }\n      }\n      this.action = 'Edit';\n      this.commentForm.patchValue({\n        content: content\n      });\n    } else {\n      this.action = 'Create';\n      this.isFromEdit = false;\n      this.commentForm.patchValue({\n        content: ''\n      });\n    }\n    this.commentModalRef = this.modalService.show(template, {\n      class: 'myModal'\n    });\n  }\n  openRemoveModal(template, id) {\n    this.lastDeleteId = id;\n    this.removeModalRef = this.modalService.show(template, {\n      class: 'myModal modal-sm'\n    });\n  }\n  onSubmit() {\n    if (this.isFromEdit) {\n      this.modifyComment();\n    } else {\n      this.createComment();\n    }\n  }\n  loadMoreComments() {\n    this.commentService.getComments(this.bookId, this.comments.length.toString()).subscribe(res => {\n      if (res.data.length !== 0) {\n        this.comments.splice(this.comments.length, 0, ...res.data);\n      }\n    });\n  }\n  createComment() {\n    this.commentService.addComment(this.bookId, this.commentForm.value).subscribe(res => {\n      this.comments.unshift(res.data);\n    });\n    this.commentForm.reset();\n  }\n  modifyComment() {\n    const editedContent = this.commentForm.value.content;\n    this.commentService.editComment(this.lastEditId, this.commentForm.value).subscribe(() => {\n      for (const c of this.comments) {\n        if (c._id === this.lastEditId) {\n          c.content = editedContent;\n          break;\n        }\n      }\n    });\n    this.commentForm.reset();\n  }\n  removeComment() {\n    this.removeModalRef.hide();\n    const delId = this.lastDeleteId;\n    this.commentService.deleteComment(this.lastDeleteId).subscribe(() => {\n      this.comments = this.comments.filter(c => c._id !== delId);\n    });\n  }\n};\n__decorate([Input('bookId'), __metadata(\"design:type\", String)], CommentComponent.prototype, \"bookId\", void 0);\n__decorate([Input('isLogged'), __metadata(\"design:type\", Boolean)], CommentComponent.prototype, \"isLogged\", void 0);\n__decorate([Input('isAdmin'), __metadata(\"design:type\", Boolean)], CommentComponent.prototype, \"isAdmin\", void 0);\n__decorate([Input('userId'), __metadata(\"design:type\", String)], CommentComponent.prototype, \"userId\", void 0);\nCommentComponent = __decorate([Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.css']\n}), __metadata(\"design:paramtypes\", [CommentService, typeof (_a = typeof BsModalService !== \"undefined\" && BsModalService) === \"function\" ? _a : Object])], CommentComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}