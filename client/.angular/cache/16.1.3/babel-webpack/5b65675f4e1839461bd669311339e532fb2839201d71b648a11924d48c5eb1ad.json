{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a, _b;\n// Decorators and Lifehooks\nimport { Component } from '@angular/core';\n// Router\nimport { Router } from '@angular/router';\n// Forms\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n// Services\nimport { CartService } from '../../services/cart.service';\nimport { HelperService } from '../../services/helper.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nexport let CartComponent = class CartComponent {\n  constructor(router, cartService, helperService, modalService) {\n    this.router = router;\n    this.cartService = cartService;\n    this.helperService = helperService;\n    this.modalService = modalService;\n  }\n  ngOnInit() {\n    this.cartService.getCart().subscribe(res => {\n      this.cart = res.data;\n      this.cartForm = this.toFormGroup(this.cart.books);\n      this.onChanges();\n    });\n  }\n  ngOnDestroy() {\n    this.changesSub$.unsubscribe();\n  }\n  toFormGroup(books) {\n    const group = {};\n    books.forEach(book => {\n      group[book._id] = new FormControl(book.qty || '', [Validators.required, Validators.min(1), Validators.max(20)]);\n    });\n    return new FormGroup(group);\n  }\n  onChanges() {\n    this.changesSub$ = this.cartForm.valueChanges.pipe(debounceTime(800), distinctUntilChanged()).subscribe(val => {\n      if (this.lastCartState !== JSON.stringify(val)) {\n        this.lastCartState = JSON.stringify(val);\n        this.reCalcSum(val);\n      }\n    });\n  }\n  openRemoveModal(template, id) {\n    this.lastDeleteId = id;\n    this.removeModalRef = this.modalService.show(template, {\n      class: 'myModal modal-sm'\n    });\n  }\n  onRemove() {\n    this.cartService.removeFromCart(this.lastDeleteId).subscribe(() => {\n      this.helperService.cartStatus.next('remove');\n      this.cart.books = this.cart.books.filter(b => b._id !== this.lastDeleteId);\n      this.reCalcSum(this.cartForm.value);\n      this.removeModalRef.hide();\n    });\n  }\n  onSubmit() {\n    this.cartService.checkout(this.cartForm.value).subscribe(() => {\n      this.helperService.cartStatus.next('updateStatus');\n      this.router.navigate(['/user/purchaseHistory']);\n    });\n  }\n  reCalcSum(formValues) {\n    let price = 0;\n    for (const b of this.cart.books) {\n      price += b.price * formValues[b._id];\n    }\n    this.cart.totalPrice = price;\n  }\n  getControl(id) {\n    return this.cartForm.get(id);\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, CartService, HelperService, typeof (_b = typeof BsModalService !== \"undefined\" && BsModalService) === \"function\" ? _b : Object])], CartComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}