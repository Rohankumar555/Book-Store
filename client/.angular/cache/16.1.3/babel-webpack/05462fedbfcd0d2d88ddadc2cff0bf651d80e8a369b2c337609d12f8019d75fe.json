{"ast":null,"code":"// RXJS\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n// HTTP\nimport { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\n// Services\nimport { ToastrService } from 'ngx-toastr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(toastr) {\n      this.toastr = toastr;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if (err.error instanceof ProgressEvent) {\n          // A client-side or network error occurred\n          this.toastr.error('Network Error!');\n        } else {\n          // The backend returned an unsuccessful response code\n          this.toastr.error(err.error.message, `${err.status.toString()} - ${err.statusText}`);\n          if (err.error.errors) {\n            for (const e in err.error.errors) {\n              if (err.error.errors.hasOwnProperty(e)) {\n                this.toastr.error(err.error.errors[e]);\n              }\n            }\n          }\n        }\n        return throwError(err.error);\n      }));\n    }\n  }\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.ToastrService));\n  };\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}