{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\n// Decorators and Lifehooks\nimport { Component } from '@angular/core';\n// Forms\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n// Router\nimport { Router } from '@angular/router';\n// Services\nimport { HelperService } from '../../../core/services/helper.service';\nimport { CartService } from '../../../core/services/cart.service';\nexport let NavigationComponent = class NavigationComponent {\n  constructor(router, helperService, cartService) {\n    this.router = router;\n    this.helperService = helperService;\n    this.cartService = cartService;\n  }\n  ngOnInit() {\n    this.statusChecker = window.setInterval(() => this.tick(), 600000);\n    this.isLogged = this.helperService.isLoggedIn();\n    this.initForm();\n    if (this.isLogged) {\n      this.getCartSize();\n    }\n    this.isLoggedSub$ = this.helperService.isUserLogged.subscribe(data => {\n      this.isLogged = data;\n    });\n    this.cartStatusSub$ = this.helperService.cartStatus.subscribe(data => {\n      if (data === 'add') {\n        this.cartItems++;\n      } else if (data === 'remove') {\n        this.cartItems--;\n      } else if (data === 'updateStatus') {\n        this.getCartSize();\n      }\n    });\n  }\n  ngOnDestroy() {\n    window.clearInterval(this.statusChecker);\n    this.isLoggedSub$.unsubscribe();\n    this.cartStatusSub$.unsubscribe();\n  }\n  initForm() {\n    this.searchForm = new FormGroup({\n      'query': new FormControl('', [Validators.required])\n    });\n  }\n  onSubmit() {\n    const query = this.searchForm.value.query.trim();\n    if (query.length !== 0) {\n      this.router.navigate([`/book/store/${query}`]);\n      this.helperService.searchQuery.next();\n    }\n  }\n  tick() {\n    this.isLogged = this.helperService.isLoggedIn();\n  }\n  isUserLogged() {\n    return this.isLogged;\n  }\n  isUserAdmin() {\n    if (!this.isAdmin) {\n      this.isAdmin = this.helperService.isAdmin();\n    }\n    return this.isAdmin;\n  }\n  getUsername() {\n    if (!this.username) {\n      this.username = this.helperService.getProfile().username;\n    }\n  }\n  getCartSize() {\n    this.cartService.getCartSize().subscribe(res => {\n      this.cartItems = res.data;\n    });\n  }\n  logout() {\n    this.username = undefined;\n    this.isAdmin = undefined;\n    this.cartItems = undefined;\n    this.helperService.clearSession();\n    this.helperService.isUserLogged.next(false);\n  }\n};\nNavigationComponent = __decorate([Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, HelperService, CartService])], NavigationComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}